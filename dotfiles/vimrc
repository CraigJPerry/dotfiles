" See install.yml for dependency installation

let mapleader=','

set nocompatible
filetype off
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

Bundle 'gmarik/vundle'
Bundle 'Lokaltog/vim-easymotion'
Bundle 'scrooloose/syntastic'
Bundle 'tpope/vim-surround'
Bundle 'davidhalter/jedi-vim'
Bundle 'scrooloose/nerdcommenter'
Bundle 'mhinz/vim-signify'

" Requires vim compiled with python
Bundle 'SirVer/ultisnips'

Bundle 'neilhwatson/vim_cf3'
au BufRead,BufNewFile *.cf set filetype=cf3
au BufRead,BufNewFile *.cfe set filetype=cf3
au BufRead,BufNewFile *.cf normal zR
au BufRead,BufNewFile *.cfe normal zR
let EnableCFE3KeywordAbbreviations=1

Bundle 'bling/vim-airline'
let g:airline_powerline_fonts=1
let g:airline#extensions#tabline#enabled=1
set ttimeoutlen=50
set report=0
set ambiwidth=double
set laststatus=2

set term=xterm  " breaks some common terminal emulators
let &t_Co=256
Bundle 'flazz/vim-colorschemes'
colorscheme Monokai

" :help <whatever> for details about any of the below

filetype plugin indent on
set nomodeline  " Historically successful attack vector against vim...
set encoding=utf8
set nobackup
set nowritebackup
set history=100
set hidden
set expandtab
set smarttab
set tabstop=4
set shiftwidth=4
set shiftround
set softtabstop=4
set nowrap
set textwidth=0
set formatoptions=croq textwidth=72
set smartcase
syntax on
set guifont=Liberation\ Mono\ for\ Powerline\ 10
set guioptions-=T
set number
set numberwidth=4
set cursorline
set cursorcolumn
set scrolloff=1
set sidescrolloff=5
set hlsearch
set showmatch
set mat=2
set wildmenu
set wildignore=*.pyc,*.class,*.o,*~,.git\*,.svn\*
set backspace=eol,start,indent
set autowrite

" Return to last edit position when opening files
autocmd BufReadPost *
    \ if line("'\"") > 0 && line("'\"") <= line("$") |
    \   exe "normal! g`\"" |
\ endif

" Highlight trailing whitespace
highlight ExtraWhitespace ctermbg=red guibg=red
au ColorScheme * highlight ExtraWhitespace guibg=red
au BufEnter * match ExtraWhitespace /\s\+$/
au InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
au InsertLeave * match ExtraWhiteSpace /\s\+$/

" Map :Q to :q
command! Q q

" Map Y like D, C etc. behave (to end of line)
nnoremap Y  y$

" Control-x to write-quit-all
nnoremap <C-x> :wqa!<CR>
inoremap <C-x> <C-o>:wqa!<CR>
vnoremap <C-x> <C-c>:wqa!<CR>

" Toggle paste mode
nnoremap <F2> :set invpaste paste?<CR>
set pastetoggle=<F2>

" Get rid of highlighting or statuses with the spacebar
nnoremap <silent> <Space> :silent noh<Bar>echo<CR>

" Go to the 79th column. ST2 has the ability to display vertical guide lines
" which is a better way to enforce 80 char wide restrictions manually
map <leader>8 79\|

" Readline like nav of ex mode
cnoremap <C-a> <Home>
cnoremap <C-e> <End>
cnoremap <C-w> <C-U>

" Move line with IDE style <C-S-u> / <C-S-d>, arrow keys are a pain to map
noremap <C-S-u> :m .-2<CR>==
noremap <C-S-d> :m .+1<CR>==
inoremap <C-S-u> <Esc>:m .-2<CR>==gi
inoremap <C-S-d> <Esc>:m .+1<CR>==gi
vnoremap <C-S-u> :m '<-2<CR>gv=gv
vnoremap <C-S-d> :m '>+1<CR>gv=gv

" Buffer management
nnoremap <leader>b :buffers<CR>:buffer 

" Tab management
nnoremap <leader>t :tabs<CR>:tab 

vnoremap <silent> * :call VisualSelection('f')<CR>
vnoremap <silent> # :call VisualSelection('b')<CR>
function! VisualSelection(direction) range
    let l:saved_reg = @"
    execute "normal! vgvy"
    let l:pattern = escape(@", '\\/.*$^~[]')
    let l:pattern = substitute(l:pattern, "\n$", "", "")
    if a:direction == 'b'
        execute "normal ?" . l:pattern . "^M"
    elseif a:direction == 'f'
        execute "normal /" . l:pattern . "^M"
    endif
    let @/ = l:pattern
    let @" = l:saved_reg
endfunction

" Pretty print a buffer containing JSON
nnoremap <leader>jp :%!python -m json.tool<CR>

" Python Customisation
" set smartindent cinwords=if,elif,else,for,while,try,except,finally,def,class
" set makeprg=python\ -u\ -c\ \"import\ py_compile,sys;\ sys.stderr=sys.stdout;\ py_compile.compile(r'%')\"
" set errorformat=%C\ %.%#,%A\ \ File\ \"%f\"\\,\ line\ %l%.%#,%Z%[%^\ ]%\\@=%m

