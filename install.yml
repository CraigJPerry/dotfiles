---

# Ansible playbook to install dotfiles
#
# DOTFILE INSTALLATION
# 1. Requires ansible installed:
#      [user@host ~]$ pip install ansible
# 2. Clone this repo to a convenient location:
#      [user@host ~]$ git clone dotfiles ~/.dotfiles
# 3. Run with:
#      [user@host dotfiles]$ ansible-playbook --connection=local --inventory-file=localhost, install.yml
#    NB: the , after localhost is required
# 4. It's a good idea (but not required) to create a branch for each host
#      [user@host ~]$ git checkout -b hostname
#
# DOTFILE ROLLBACK
# 1. Revert to backed up original dotfiles with:
#   [user@host ~]$ ansible-playbook --connection=local --inventory-file=localhost, install.yml --tags rollback

- hosts: all

  vars:

    this_dir: "{{ ansible_env.PWD }}"
    backup_dir: ~/.dotfiles.old
    dotfiles:
      - source: bashrc
        dest: .bashrc
      - source: bash_profile
        dest: .bash_profile
      - source: bash_logout
        dest: .bash_logout
      - source: gitconfig
        dest: .gitconfig
      - source: vimrc
        dest: .vimrc

  tasks:

    # Installation (no --tags on ansible cmdline)

    - name: "BACKUP | Make Backup Folder: {{ backup_dir }}"
      register: this_is_an_installation_run
      file: state=directory path={{ backup_dir }}

    - name: BACKUP | Backup Old Dotfiles
      copy: src=~/{{ item.dest }} dest={{ backup_dir }}/{{ item.source }} backup=yes
      ignore_errors: yes
      with_items: dotfiles

    - name: INSTALL DOTFILES | Link New Dotfiles
      file: state=link force=yes src={{ this_dir }}/{{ item.source }} dest=~/{{ item.dest }}
      with_items: dotfiles

    - name: CHECK | Effective User ID
      command: id -u
      register: effective_userid
      changed_when: effective_userid.rc != 0

    - name: INSTALL VIM PLUGINS | Pre-requisite RPMs
      yum: state=present name={{ item }}
      sudo: '{{ effective_userid.stdout != "0" | bool }}'
      ignore_errors: yes
      with_items:
        - vim-enhanced
        - python-pip
      when: ansible_os_family == "RedHat"

    - name: INSTALL VIM PLUGINS | Pre-requisite Python Modules
      pip: state=present name={{ item }}
      sudo: '{{ effective_userid.stdout != "0" | bool }}'
      ignore_errors: yes
      with_items:
        - jedi
        - pylint
        - pep8

    - name: INSTALL VIM PLUGINS | Vim Bundle Directory
      file: state=directory path=~/.vim/bundle

    - name: INSTALL VIM PLUGINS | Vundle Plugin Manager
      git: repo="https://github.com/gmarik/vundle.git"
           dest=~/.vim/bundle/vundle
      register: vundle_cloned

    - name: INSTALL VIM PLUGINS | Install Vundle Bundles
      shell: "echo | vim -f +BundleInstall +qall"
      when: vundle_cloned | changed

    - name: DIRS | Public Code
      file: state=directory path=~/Code/public

    - name: DIRS | Gists
      file: state=directory path=~/Code/gists

    - name: DIRS | 3rd Party
      file: state=directory path=~/Code/3rd_party

    - name: SSH | Check Key
      command: "ls ~/.ssh/id_rsa"
      ignore_errors: yes
      register: ssh_key
      changed_when: ssh_key.rc != 0

    - name: SSH | Generate Key
      command: "ssh-keygen -N '' -t rsa -f ~/.ssh/id_rsa"
      when: ssh_key | changed

    # Rollback (--tags rollback)

    - name: ROLLBACK | Delete Linked Dotfiles
      file: state=absent path={{ this_dir }}/{{ item.dest }}
      with_items: dotfiles
      tags:
        - rollback
      when: this_is_an_installation_run is not defined

    - name: ROLLBACK | Restore Backups
      copy: src={{ backup_dir }}/{{ item.source }} dest=~/{{ item.dest }}
      ignore_errors: yes
      with_items: dotfiles
      tags:
        - rollback
      when: this_is_an_installation_run is not defined

